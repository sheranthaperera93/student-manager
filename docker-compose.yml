services:
  db:
    image: bitnami/postgresql
    container_name: db
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_DB: studentmanagement
      POSTGRES_USER: sheranthap
      POSTGRES_PASSWORD: Test@123
    volumes:
      - pgdata:/var/lib/postgresql/data
    # networks:
    #   - mynetwork

  admin-frontend:
    image: admin-frontend
    container_name: admin-frontend
    build: ./AdminFrontend
    ports:
      - "3000:80"
    # networks:
    #   - mynetwork

  federation-gateway:
    image: federation-gateway
    container_name: federation-gateway
    build: ./FederationGateway
    environment:
      - USERS_GRAPHQL_URL=http://user-service:3002/graphql
      - JOB_QUEUE_GRAPHQL_URL=http://job-queue-service:3006/graphql
      - COURSES_GRAPHQL_URL=http://course-service:3004/graphql
    ports:
      - "3001:3001"
    depends_on:
      - user-service
      - job-queue-service
    # networks:
    #   - mynetwork

  user-service:
    image: user-service
    container_name: user-service
    build: ./UserService
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_USERNAME=sheranthap
      - POSTGRES_PASSWORD=Test@123
      - POSTGRES_DATABASE=studentmanagement
      - KAFKA_BROKER=kafka:9092
      - KAFKA_CLIENT_ID=nestjs-consumer-server
      - COURSES_GRAPHQL_URL=http://course-service:3004/graphql
    volumes:
      - user_data:/app/dist/uploads
    depends_on:
      - db
      - kafka
    ports:
      - "3002:3002"
    # networks:
    #   - mynetwork

  job-queue-service:
    image: job-queue-service
    container_name: job-queue-service
    build: ./JobQueueService
    volumes:
      - job_queue_data:/app/dist/job-queue/uploads
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_USERNAME=sheranthap
      - POSTGRES_PASSWORD=Test@123
      - POSTGRES_DATABASE=studentmanagement
      - KAFKA_BROKER=kafka:9092
      - KAFKA_CLIENT_ID=nestjs-consumer-server
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=FortudeSmP@2023
      - FEDERATION_GATEWAY_URL=http://federation-gateway:3001/graphql
      - USER_SERVICE_URL=http://user-service:3002
    depends_on:
      - db
      - redis
      - kafka
    ports:
      - 3006:3006
    # networks:
    #   - mynetwork

  notification-service:
    image: notification-service
    container_name: notification-service
    build: ./NotificationService
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_CLIENT_ID=nestjs-consumer-server
    depends_on:
      - kafka
    ports:
      - "3003:3003"
    # networks:
    #   - mynetwork

  course-service:
    image: course-service
    container_name: course-service
    build: ./CourseService
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_USERNAME=sheranthap
      - POSTGRES_PASSWORD=Test@123
      - POSTGRES_DATABASE=studentmanagement
      - KAFKA_BROKER=kafka:9092
      - KAFKA_CLIENT_ID=nestjs-consumer-server
    depends_on:
      - db
      - kafka
    ports:
      - "3004:3004"
    # networks:
    #   - mynetwork

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=FortudeSmP@2023
    volumes:
      - redis_data:/data
    # networks:
    #   - mynetwork

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    restart: unless-stopped
    # networks:
    #   - mynetwork

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://host.docker.internal:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
      KAFKA_NODE_ID: "1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    depends_on:
      - zookeeper
    # networks:
    #   - mynetwork

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms32M -Xmx64M"
    depends_on:
      - kafka
    # networks:
    #   - mynetwork

volumes:
  pgdata:
    driver: local
  redis_data:
    driver: local
  user_data:
    driver: local
  job_queue_data:
    driver: local
  kafka_data:
    driver: local

networks:
  mynetwork:
    driver: bridge
